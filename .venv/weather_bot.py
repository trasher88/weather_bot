import os
from dotenv import load_dotenv
import requests
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
AWAITING_CITY = 1

#TELEGRAM_TOKEN = "8265742864:AAEIXgn-1flIaYJwYjDFdL7_f6YtosIMGog"
#WEATHER_API_KEY = "a7d71869b1ad43ff9cd142803250308"

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞")],
            [KeyboardButton("‚öôÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üå¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WeatherBot!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )
    return AWAITING_CITY


async def weather_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'current'
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:",
        reply_markup=None
    )
    return AWAITING_CITY


async def search_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'search'
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å —Å—Ç—Ä–∞–Ω—É: '–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è'",
        reply_markup=None
    )
    return AWAITING_CITY


async def handle_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    mode = context.user_data.get('mode', 'current')

    try:
        if mode == 'search':
            response = requests.get(
                f"http://api.weatherapi.com/v1/search.json?key={WEATHER_API_KEY}&q={city}",
                timeout=10
            ).json()

            if not response:
                raise ValueError("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            locations = "\n".join(
                f"{i + 1}. {loc['name']}, {loc.get('country', 'N/A')}"
                for i, loc in enumerate(response[:5]))

            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{locations}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
                reply_markup=get_main_menu()
            )

        else:
            response = requests.get(
            f"http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}&lang=ru",
            timeout=10
        ).json()

            weather_data = (
                f"<b>üå¶ –ü–æ–≥–æ–¥–∞ –≤ {response['location']['name']}</b>\n"
                f"‚Ä¢ üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {response['current']['temp_c']}¬∞C\n"
                f"‚Ä¢ üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {response['current']['humidity']}%\n"
                f"‚Ä¢ üå¨ –í–µ—Ç–µ—Ä: {response['current']['wind_kph']} –∫–º/—á\n"
                f"‚Ä¢ ‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {response['current']['condition']['text']}"
            )

            await update.message.reply_html(
                weather_data,
                reply_markup=get_main_menu()
            )

    except Exception as e:
        error_msg = {
            'search': "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:",
            'current': "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
        }.get(mode, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        await update.message.reply_text(
            error_msg,
            reply_markup=get_main_menu()
        )

    return AWAITING_CITY


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "‚Ä¢ <b>üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ <b>üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞</b> - –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º\n"
        "‚Ä¢ <b>/start</b> - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ <b>/help</b> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_html(
        help_text,
        reply_markup=get_main_menu()
    )
    return AWAITING_CITY


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=None
    )
    return ConversationHandler.END


def main():
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                AWAITING_CITY: [
                    MessageHandler(filters.Regex('^üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å$'), weather_now),
                    MessageHandler(filters.Regex('^üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞$'), search_city),
                    MessageHandler(filters.Regex('^‚öôÔ∏è –ü–æ–º–æ—â—å$'), help_command),
                    MessageHandler(filters.Regex('^‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é$'), cancel),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_input)
                ]
            },
            fallbacks=[CommandHandler('start', start)]
        )

        app.add_handler(conv_handler)
        app.add_handler(CommandHandler('help', help_command))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()

    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


if __name__ == "__main__":
    main()